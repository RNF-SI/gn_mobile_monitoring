// Mocks generated by Mockito 5.4.4 from annotations
// in gn_mobile_monitoring/test/data/repository/visit_repository_observer_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;

import 'package:gn_mobile_monitoring/data/datasource/interface/database/visites_database.dart'
    as _i3;
import 'package:gn_mobile_monitoring/data/db/database.dart' as _i2;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeTBaseVisit_0 extends _i1.SmartFake implements _i2.TBaseVisit {
  _FakeTBaseVisit_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [VisitesDatabase].
///
/// See the documentation for Mockito's code generation for more information.
class MockVisitesDatabase extends _i1.Mock implements _i3.VisitesDatabase {
  @override
  _i4.Future<List<_i2.TBaseVisit>> getAllVisits() => (super.noSuchMethod(
        Invocation.method(
          #getAllVisits,
          [],
        ),
        returnValue: _i4.Future<List<_i2.TBaseVisit>>.value(<_i2.TBaseVisit>[]),
        returnValueForMissingStub:
            _i4.Future<List<_i2.TBaseVisit>>.value(<_i2.TBaseVisit>[]),
      ) as _i4.Future<List<_i2.TBaseVisit>>);

  @override
  _i4.Future<List<_i2.TBaseVisit>> getVisitsBySiteIdAndModuleId(
    int? siteId,
    int? moduleId,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #getVisitsBySiteIdAndModuleId,
          [
            siteId,
            moduleId,
          ],
        ),
        returnValue: _i4.Future<List<_i2.TBaseVisit>>.value(<_i2.TBaseVisit>[]),
        returnValueForMissingStub:
            _i4.Future<List<_i2.TBaseVisit>>.value(<_i2.TBaseVisit>[]),
      ) as _i4.Future<List<_i2.TBaseVisit>>);

  @override
  _i4.Future<_i2.TBaseVisit> getVisitById(int? id) => (super.noSuchMethod(
        Invocation.method(
          #getVisitById,
          [id],
        ),
        returnValue: _i4.Future<_i2.TBaseVisit>.value(_FakeTBaseVisit_0(
          this,
          Invocation.method(
            #getVisitById,
            [id],
          ),
        )),
        returnValueForMissingStub:
            _i4.Future<_i2.TBaseVisit>.value(_FakeTBaseVisit_0(
          this,
          Invocation.method(
            #getVisitById,
            [id],
          ),
        )),
      ) as _i4.Future<_i2.TBaseVisit>);

  @override
  _i4.Future<int> insertVisit(_i2.TBaseVisitsCompanion? visit) =>
      (super.noSuchMethod(
        Invocation.method(
          #insertVisit,
          [visit],
        ),
        returnValue: _i4.Future<int>.value(0),
        returnValueForMissingStub: _i4.Future<int>.value(0),
      ) as _i4.Future<int>);

  @override
  _i4.Future<bool> updateVisit(_i2.TBaseVisitsCompanion? visit) =>
      (super.noSuchMethod(
        Invocation.method(
          #updateVisit,
          [visit],
        ),
        returnValue: _i4.Future<bool>.value(false),
        returnValueForMissingStub: _i4.Future<bool>.value(false),
      ) as _i4.Future<bool>);

  @override
  _i4.Future<int> deleteVisit(int? id) => (super.noSuchMethod(
        Invocation.method(
          #deleteVisit,
          [id],
        ),
        returnValue: _i4.Future<int>.value(0),
        returnValueForMissingStub: _i4.Future<int>.value(0),
      ) as _i4.Future<int>);

  @override
  _i4.Future<_i2.TVisitComplement?> getVisitComplementById(int? visitId) =>
      (super.noSuchMethod(
        Invocation.method(
          #getVisitComplementById,
          [visitId],
        ),
        returnValue: _i4.Future<_i2.TVisitComplement?>.value(),
        returnValueForMissingStub: _i4.Future<_i2.TVisitComplement?>.value(),
      ) as _i4.Future<_i2.TVisitComplement?>);

  @override
  _i4.Future<int> insertVisitComplement(
          _i2.TVisitComplementsCompanion? complement) =>
      (super.noSuchMethod(
        Invocation.method(
          #insertVisitComplement,
          [complement],
        ),
        returnValue: _i4.Future<int>.value(0),
        returnValueForMissingStub: _i4.Future<int>.value(0),
      ) as _i4.Future<int>);

  @override
  _i4.Future<bool> updateVisitComplement(
          _i2.TVisitComplementsCompanion? complement) =>
      (super.noSuchMethod(
        Invocation.method(
          #updateVisitComplement,
          [complement],
        ),
        returnValue: _i4.Future<bool>.value(false),
        returnValueForMissingStub: _i4.Future<bool>.value(false),
      ) as _i4.Future<bool>);

  @override
  _i4.Future<int> deleteVisitComplement(int? visitId) => (super.noSuchMethod(
        Invocation.method(
          #deleteVisitComplement,
          [visitId],
        ),
        returnValue: _i4.Future<int>.value(0),
        returnValueForMissingStub: _i4.Future<int>.value(0),
      ) as _i4.Future<int>);

  @override
  _i4.Future<void> deleteVisitWithComplement(int? visitId) =>
      (super.noSuchMethod(
        Invocation.method(
          #deleteVisitWithComplement,
          [visitId],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<List<_i2.CorVisitObserverData>> getVisitObservers(int? visitId) =>
      (super.noSuchMethod(
        Invocation.method(
          #getVisitObservers,
          [visitId],
        ),
        returnValue: _i4.Future<List<_i2.CorVisitObserverData>>.value(
            <_i2.CorVisitObserverData>[]),
        returnValueForMissingStub:
            _i4.Future<List<_i2.CorVisitObserverData>>.value(
                <_i2.CorVisitObserverData>[]),
      ) as _i4.Future<List<_i2.CorVisitObserverData>>);

  @override
  _i4.Future<int> insertVisitObserver(
          _i2.CorVisitObserverCompanion? observer) =>
      (super.noSuchMethod(
        Invocation.method(
          #insertVisitObserver,
          [observer],
        ),
        returnValue: _i4.Future<int>.value(0),
        returnValueForMissingStub: _i4.Future<int>.value(0),
      ) as _i4.Future<int>);

  @override
  _i4.Future<int> deleteVisitObservers(int? visitId) => (super.noSuchMethod(
        Invocation.method(
          #deleteVisitObservers,
          [visitId],
        ),
        returnValue: _i4.Future<int>.value(0),
        returnValueForMissingStub: _i4.Future<int>.value(0),
      ) as _i4.Future<int>);

  @override
  _i4.Future<void> replaceVisitObservers(
    int? visitId,
    List<_i2.CorVisitObserverCompanion>? observers,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #replaceVisitObservers,
          [
            visitId,
            observers,
          ],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<List<_i2.TBaseVisit>> getVisitsBySite(int? siteId) =>
      (super.noSuchMethod(
        Invocation.method(
          #getVisitsBySite,
          [siteId],
        ),
        returnValue: _i4.Future<List<_i2.TBaseVisit>>.value(<_i2.TBaseVisit>[]),
        returnValueForMissingStub:
            _i4.Future<List<_i2.TBaseVisit>>.value(<_i2.TBaseVisit>[]),
      ) as _i4.Future<List<_i2.TBaseVisit>>);

  @override
  _i4.Future<bool> updateVisitServerId(
    int? localVisitId,
    int? serverId,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #updateVisitServerId,
          [
            localVisitId,
            serverId,
          ],
        ),
        returnValue: _i4.Future<bool>.value(false),
        returnValueForMissingStub: _i4.Future<bool>.value(false),
      ) as _i4.Future<bool>);
}
