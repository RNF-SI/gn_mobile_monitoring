// Mocks generated by Mockito 5.4.4 from annotations
// in gn_mobile_monitoring/test/data/repository/observations_repository_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i3;

import 'package:gn_mobile_monitoring/data/datasource/interface/database/observations_database.dart'
    as _i2;
import 'package:gn_mobile_monitoring/data/entity/observation_entity.dart'
    as _i4;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

/// A class which mocks [ObservationsDatabase].
///
/// See the documentation for Mockito's code generation for more information.
class MockObservationsDatabase extends _i1.Mock
    implements _i2.ObservationsDatabase {
  @override
  _i3.Future<List<_i4.ObservationEntity>> getObservationsByVisitId(
          int? visitId) =>
      (super.noSuchMethod(
        Invocation.method(
          #getObservationsByVisitId,
          [visitId],
        ),
        returnValue: _i3.Future<List<_i4.ObservationEntity>>.value(
            <_i4.ObservationEntity>[]),
        returnValueForMissingStub:
            _i3.Future<List<_i4.ObservationEntity>>.value(
                <_i4.ObservationEntity>[]),
      ) as _i3.Future<List<_i4.ObservationEntity>>);

  @override
  _i3.Future<_i4.ObservationEntity?> getObservationById(int? observationId) =>
      (super.noSuchMethod(
        Invocation.method(
          #getObservationById,
          [observationId],
        ),
        returnValue: _i3.Future<_i4.ObservationEntity?>.value(),
        returnValueForMissingStub: _i3.Future<_i4.ObservationEntity?>.value(),
      ) as _i3.Future<_i4.ObservationEntity?>);

  @override
  _i3.Future<int> createObservation(_i4.ObservationEntity? observation) =>
      (super.noSuchMethod(
        Invocation.method(
          #createObservation,
          [observation],
        ),
        returnValue: _i3.Future<int>.value(0),
        returnValueForMissingStub: _i3.Future<int>.value(0),
      ) as _i3.Future<int>);

  @override
  _i3.Future<bool> updateObservation(_i4.ObservationEntity? observation) =>
      (super.noSuchMethod(
        Invocation.method(
          #updateObservation,
          [observation],
        ),
        returnValue: _i3.Future<bool>.value(false),
        returnValueForMissingStub: _i3.Future<bool>.value(false),
      ) as _i3.Future<bool>);

  @override
  _i3.Future<bool> deleteObservation(int? observationId) => (super.noSuchMethod(
        Invocation.method(
          #deleteObservation,
          [observationId],
        ),
        returnValue: _i3.Future<bool>.value(false),
        returnValueForMissingStub: _i3.Future<bool>.value(false),
      ) as _i3.Future<bool>);

  @override
  _i3.Future<bool> updateObservationServerId(
    int? localObservationId,
    int? serverObservationId,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #updateObservationServerId,
          [
            localObservationId,
            serverObservationId,
          ],
        ),
        returnValue: _i3.Future<bool>.value(false),
        returnValueForMissingStub: _i3.Future<bool>.value(false),
      ) as _i3.Future<bool>);
}
