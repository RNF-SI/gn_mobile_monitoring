import 'dart:math';

import 'package:dio/dio.dart';
import 'package:gn_mobile_monitoring/domain/model/observation.dart';

/// Types d'erreurs que nous pouvons simuler
enum ErrorType {
  none, // Aucune erreur
  missingCdNom, // ‚ùå Esp√®ce manquante (champ requis)
  invalidVisitId, // ‚ùå ID de visite inexistant (99999)
  invalidDataTypes, // ‚ùå Types de donn√©es incorrects (string au lieu d'int)
  malformedJson, // ‚ùå JSON invalide
  permissionDenied, // ‚ùå Permissions insuffisantes (403)
  duplicateUuid, // ‚ùå UUID d√©j√† existant (409)
  serverTimeout, // ‚ùå Timeout du serveur
  moduleInactive, // ‚ùå Module inexistant/inactif
}

/// Simulateur d'erreurs pour tester la synchronisation ascendante
/// Permet de simuler diff√©rents types d'erreurs de serveur
///
/// üîß Configuration rapide pour les tests :
/// - Changez _enableErrorSimulation √† true/false
/// - Changez _currentErrorType pour le type d'erreur souhait√©
/// - Ajustez _errorProbability pour la fr√©quence (0-100%)
class SyncErrorSimulator {
  // üîß CONFIGURATION DES TESTS - Modifiez ces valeurs pour tester
  static const bool _enableErrorSimulation =
      false; // ‚ö†Ô∏è ATTENTION: Activer seulement pour les tests
  static const ErrorType _currentErrorType =
      ErrorType.missingCdNom; // Type d'erreur √† simuler
  static const int _errorProbability = 100; // Probabilit√© d'erreur (0-100%)

  /// V√©rifie si une erreur doit √™tre simul√©e
  static bool shouldSimulateError() {
    if (!_enableErrorSimulation || _currentErrorType == ErrorType.none) {
      return false;
    }

    final random = Random();
    return random.nextInt(100) < _errorProbability;
  }

  /// Modifie les donn√©es d'observation pour provoquer une erreur
  static Observation? corruptObservationData(Observation observation) {
    if (!shouldSimulateError()) return observation;

    switch (_currentErrorType) {
      case ErrorType.none:
        return observation;

      case ErrorType.missingCdNom:
        // Supprimer le cd_nom (esp√®ce obligatoire)
        return observation.copyWith(
          cdNom: null,
        );

      case ErrorType.invalidVisitId:
        // Utiliser un ID de visite inexistant
        return observation.copyWith(
          idBaseVisit: 99999,
        );

      case ErrorType.invalidDataTypes:
        // Les types incorrects seront g√©r√©s dans corruptRequestBody
        return observation;

      case ErrorType.duplicateUuid:
        // Utiliser un UUID fixe pour provoquer un conflit
        return observation.copyWith(
          uuidObservation: 'duplicate-uuid-12345',
        );

      default:
        return observation;
    }
  }

  /// Modifie le corps de la requ√™te pour provoquer une erreur
  static Map<String, dynamic> corruptRequestBody(
      Map<String, dynamic> requestBody) {
    if (!shouldSimulateError()) return requestBody;

    switch (_currentErrorType) {
      case ErrorType.none:
        return requestBody;

      case ErrorType.invalidDataTypes:
        // Corrompre les types de donn√©es
        final properties =
            Map<String, dynamic>.from(requestBody['properties'] ?? {});
        if (properties.containsKey('cd_nom')) {
          properties['cd_nom'] = 'texte_au_lieu_de_nombre';
        }
        if (properties.containsKey('id_base_visit')) {
          properties['id_base_visit'] = 'texte_au_lieu_de_nombre';
        }
        return {
          ...requestBody,
          'properties': properties,
        };

      case ErrorType.malformedJson:
        // Cr√©er un JSON invalide (on simule en ajoutant un champ probl√©matique)
        return {
          ...requestBody,
          'invalid_json': '"unclosed_string',
        };

      default:
        return requestBody;
    }
  }

  /// Lance une exception sp√©cifique selon le type d'erreur
  static void throwSimulatedError() {
    if (!shouldSimulateError()) return;

    switch (_currentErrorType) {
      case ErrorType.none:
        return;

      case ErrorType.permissionDenied:
        throw DioException(
          requestOptions: RequestOptions(path: '/test'),
          response: Response(
            requestOptions: RequestOptions(path: '/test'),
            statusCode: 403,
            data: {
              'detail':
                  'Permissions insuffisantes: CRUVED "C" requis sur les observations'
            },
          ),
        );

      case ErrorType.serverTimeout:
        throw DioException(
          requestOptions: RequestOptions(path: '/test'),
          type: DioExceptionType.receiveTimeout,
          message: 'Timeout lors de l\'envoi de l\'observation',
        );

      case ErrorType.moduleInactive:
        throw DioException(
          requestOptions: RequestOptions(path: '/test'),
          response: Response(
            requestOptions: RequestOptions(path: '/test'),
            statusCode: 400,
            data: {'detail': 'Module inexistant ou inactif'},
          ),
        );

      case ErrorType.missingCdNom:
        throw DioException(
          requestOptions: RequestOptions(path: '/test'),
          response: Response(
            requestOptions: RequestOptions(path: '/test'),
            statusCode: 400,
            data: {
              'detail': 'Champ requis manquant: cd_nom (esp√®ce obligatoire)'
            },
          ),
        );

      case ErrorType.invalidVisitId:
        throw DioException(
          requestOptions: RequestOptions(path: '/test'),
          response: Response(
            requestOptions: RequestOptions(path: '/test'),
            statusCode: 400,
            data: {
              'detail':
                  'Cl√© √©trang√®re invalide: id_base_visit=99999 n\'existe pas'
            },
          ),
        );

      case ErrorType.invalidDataTypes:
        throw DioException(
          requestOptions: RequestOptions(path: '/test'),
          response: Response(
            requestOptions: RequestOptions(path: '/test'),
            statusCode: 400,
            data: {
              'detail': 'Type de donn√©es incorrect: cd_nom doit √™tre un entier'
            },
          ),
        );

      case ErrorType.malformedJson:
        throw DioException(
          requestOptions: RequestOptions(path: '/test'),
          response: Response(
            requestOptions: RequestOptions(path: '/test'),
            statusCode: 400,
            data: {'detail': 'JSON malform√©: erreur de syntaxe'},
          ),
        );

      case ErrorType.duplicateUuid:
        throw DioException(
          requestOptions: RequestOptions(path: '/test'),
          response: Response(
            requestOptions: RequestOptions(path: '/test'),
            statusCode: 409,
            data: {'detail': 'Violation d\'unicit√©: UUID d√©j√† existant'},
          ),
        );
    }
  }

  /// Retourne une description du type d'erreur actuel
  static String getErrorDescription() {
    switch (_currentErrorType) {
      case ErrorType.none:
        return 'Aucune erreur';
      case ErrorType.missingCdNom:
        return 'Champ cd_nom manquant (esp√®ce obligatoire)';
      case ErrorType.invalidVisitId:
        return 'ID de visite inexistant (99999)';
      case ErrorType.invalidDataTypes:
        return 'Types de donn√©es incorrects (string au lieu d\'int)';
      case ErrorType.malformedJson:
        return 'JSON malform√© avec syntaxe invalide';
      case ErrorType.permissionDenied:
        return 'Permissions insuffisantes (403)';
      case ErrorType.duplicateUuid:
        return 'UUID d√©j√† existant (conflit)';
      case ErrorType.serverTimeout:
        return 'Timeout du serveur';
      case ErrorType.moduleInactive:
        return 'Module inexistant ou inactif';
    }
  }

  /// Retourne le type d'erreur actuellement actif
  static ErrorType get currentErrorType => _currentErrorType;

  /// Retourne la probabilit√© d'erreur actuelle
  static int get errorProbability => _errorProbability;

  /// Retourne si la simulation est activ√©e
  static bool get isEnabled => _enableErrorSimulation;
}
